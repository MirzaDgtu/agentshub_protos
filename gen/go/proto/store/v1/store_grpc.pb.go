// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/store/v1/store.proto

package storev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StoreService_CreateStore_FullMethodName      = "/store.v1.StoreService/CreateStore"
	StoreService_GetStore_FullMethodName         = "/store.v1.StoreService/GetStore"
	StoreService_UpdateStore_FullMethodName      = "/store.v1.StoreService/UpdateStore"
	StoreService_DeleteStore_FullMethodName      = "/store.v1.StoreService/DeleteStore"
	StoreService_ListStores_FullMethodName       = "/store.v1.StoreService/ListStores"
	StoreService_RecordStoreVisit_FullMethodName = "/store.v1.StoreService/RecordStoreVisit"
	StoreService_GetStoreVisits_FullMethodName   = "/store.v1.StoreService/GetStoreVisits"
	StoreService_UpdateStoreVisit_FullMethodName = "/store.v1.StoreService/UpdateStoreVisit"
	StoreService_AddStorePhoto_FullMethodName    = "/store.v1.StoreService/AddStorePhoto"
	StoreService_DeleteStorePhoto_FullMethodName = "/store.v1.StoreService/DeleteStorePhoto"
	StoreService_ListStorePhotos_FullMethodName  = "/store.v1.StoreService/ListStorePhotos"
	StoreService_GetStoreStats_FullMethodName    = "/store.v1.StoreService/GetStoreStats"
	StoreService_GetVisitStats_FullMethodName    = "/store.v1.StoreService/GetVisitStats"
)

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StoreService предоставляет методы для работы с торговыми точками
type StoreServiceClient interface {
	// Store management
	CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	// Store visits
	RecordStoreVisit(ctx context.Context, in *RecordStoreVisitRequest, opts ...grpc.CallOption) (*StoreVisitResponse, error)
	GetStoreVisits(ctx context.Context, in *GetStoreVisitsRequest, opts ...grpc.CallOption) (*ListStoreVisitsResponse, error)
	UpdateStoreVisit(ctx context.Context, in *UpdateStoreVisitRequest, opts ...grpc.CallOption) (*StoreVisitResponse, error)
	// Store photos
	AddStorePhoto(ctx context.Context, in *AddStorePhotoRequest, opts ...grpc.CallOption) (*StorePhotoResponse, error)
	DeleteStorePhoto(ctx context.Context, in *DeleteStorePhotoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListStorePhotos(ctx context.Context, in *ListStorePhotosRequest, opts ...grpc.CallOption) (*ListStorePhotosResponse, error)
	// Store analytics
	GetStoreStats(ctx context.Context, in *GetStoreStatsRequest, opts ...grpc.CallOption) (*StoreStatsResponse, error)
	GetVisitStats(ctx context.Context, in *GetVisitStatsRequest, opts ...grpc.CallOption) (*VisitStatsResponse, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, StoreService_CreateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, StoreService_UpdateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoreService_DeleteStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, StoreService_ListStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) RecordStoreVisit(ctx context.Context, in *RecordStoreVisitRequest, opts ...grpc.CallOption) (*StoreVisitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreVisitResponse)
	err := c.cc.Invoke(ctx, StoreService_RecordStoreVisit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreVisits(ctx context.Context, in *GetStoreVisitsRequest, opts ...grpc.CallOption) (*ListStoreVisitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoreVisitsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreVisits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) UpdateStoreVisit(ctx context.Context, in *UpdateStoreVisitRequest, opts ...grpc.CallOption) (*StoreVisitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreVisitResponse)
	err := c.cc.Invoke(ctx, StoreService_UpdateStoreVisit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) AddStorePhoto(ctx context.Context, in *AddStorePhotoRequest, opts ...grpc.CallOption) (*StorePhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorePhotoResponse)
	err := c.cc.Invoke(ctx, StoreService_AddStorePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) DeleteStorePhoto(ctx context.Context, in *DeleteStorePhotoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoreService_DeleteStorePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ListStorePhotos(ctx context.Context, in *ListStorePhotosRequest, opts ...grpc.CallOption) (*ListStorePhotosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStorePhotosResponse)
	err := c.cc.Invoke(ctx, StoreService_ListStorePhotos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetStoreStats(ctx context.Context, in *GetStoreStatsRequest, opts ...grpc.CallOption) (*StoreStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreStatsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetStoreStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) GetVisitStats(ctx context.Context, in *GetVisitStatsRequest, opts ...grpc.CallOption) (*VisitStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VisitStatsResponse)
	err := c.cc.Invoke(ctx, StoreService_GetVisitStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations must embed UnimplementedStoreServiceServer
// for forward compatibility.
//
// StoreService предоставляет методы для работы с торговыми точками
type StoreServiceServer interface {
	// Store management
	CreateStore(context.Context, *CreateStoreRequest) (*StoreResponse, error)
	GetStore(context.Context, *GetStoreRequest) (*StoreResponse, error)
	UpdateStore(context.Context, *UpdateStoreRequest) (*StoreResponse, error)
	DeleteStore(context.Context, *DeleteStoreRequest) (*emptypb.Empty, error)
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	// Store visits
	RecordStoreVisit(context.Context, *RecordStoreVisitRequest) (*StoreVisitResponse, error)
	GetStoreVisits(context.Context, *GetStoreVisitsRequest) (*ListStoreVisitsResponse, error)
	UpdateStoreVisit(context.Context, *UpdateStoreVisitRequest) (*StoreVisitResponse, error)
	// Store photos
	AddStorePhoto(context.Context, *AddStorePhotoRequest) (*StorePhotoResponse, error)
	DeleteStorePhoto(context.Context, *DeleteStorePhotoRequest) (*emptypb.Empty, error)
	ListStorePhotos(context.Context, *ListStorePhotosRequest) (*ListStorePhotosResponse, error)
	// Store analytics
	GetStoreStats(context.Context, *GetStoreStatsRequest) (*StoreStatsResponse, error)
	GetVisitStats(context.Context, *GetVisitStatsRequest) (*VisitStatsResponse, error)
	mustEmbedUnimplementedStoreServiceServer()
}

// UnimplementedStoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoreServiceServer struct{}

func (UnimplementedStoreServiceServer) CreateStore(context.Context, *CreateStoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedStoreServiceServer) GetStore(context.Context, *GetStoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedStoreServiceServer) UpdateStore(context.Context, *UpdateStoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedStoreServiceServer) DeleteStore(context.Context, *DeleteStoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedStoreServiceServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedStoreServiceServer) RecordStoreVisit(context.Context, *RecordStoreVisitRequest) (*StoreVisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordStoreVisit not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreVisits(context.Context, *GetStoreVisitsRequest) (*ListStoreVisitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreVisits not implemented")
}
func (UnimplementedStoreServiceServer) UpdateStoreVisit(context.Context, *UpdateStoreVisitRequest) (*StoreVisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStoreVisit not implemented")
}
func (UnimplementedStoreServiceServer) AddStorePhoto(context.Context, *AddStorePhotoRequest) (*StorePhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStorePhoto not implemented")
}
func (UnimplementedStoreServiceServer) DeleteStorePhoto(context.Context, *DeleteStorePhotoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorePhoto not implemented")
}
func (UnimplementedStoreServiceServer) ListStorePhotos(context.Context, *ListStorePhotosRequest) (*ListStorePhotosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorePhotos not implemented")
}
func (UnimplementedStoreServiceServer) GetStoreStats(context.Context, *GetStoreStatsRequest) (*StoreStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreStats not implemented")
}
func (UnimplementedStoreServiceServer) GetVisitStats(context.Context, *GetVisitStatsRequest) (*VisitStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitStats not implemented")
}
func (UnimplementedStoreServiceServer) mustEmbedUnimplementedStoreServiceServer() {}
func (UnimplementedStoreServiceServer) testEmbeddedByValue()                      {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).CreateStore(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStore(ctx, req.(*GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_UpdateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).UpdateStore(ctx, req.(*UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_DeleteStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).DeleteStore(ctx, req.(*DeleteStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ListStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_RecordStoreVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordStoreVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).RecordStoreVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_RecordStoreVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).RecordStoreVisit(ctx, req.(*RecordStoreVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreVisits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreVisitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreVisits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreVisits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreVisits(ctx, req.(*GetStoreVisitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_UpdateStoreVisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreVisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).UpdateStoreVisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_UpdateStoreVisit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).UpdateStoreVisit(ctx, req.(*UpdateStoreVisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_AddStorePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStorePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).AddStorePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_AddStorePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).AddStorePhoto(ctx, req.(*AddStorePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_DeleteStorePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).DeleteStorePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_DeleteStorePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).DeleteStorePhoto(ctx, req.(*DeleteStorePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ListStorePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorePhotosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ListStorePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_ListStorePhotos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ListStorePhotos(ctx, req.(*ListStorePhotosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetStoreStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetStoreStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetStoreStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetStoreStats(ctx, req.(*GetStoreStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_GetVisitStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVisitStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).GetVisitStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_GetVisitStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).GetVisitStats(ctx, req.(*GetVisitStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.v1.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStore",
			Handler:    _StoreService_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _StoreService_GetStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _StoreService_UpdateStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _StoreService_DeleteStore_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _StoreService_ListStores_Handler,
		},
		{
			MethodName: "RecordStoreVisit",
			Handler:    _StoreService_RecordStoreVisit_Handler,
		},
		{
			MethodName: "GetStoreVisits",
			Handler:    _StoreService_GetStoreVisits_Handler,
		},
		{
			MethodName: "UpdateStoreVisit",
			Handler:    _StoreService_UpdateStoreVisit_Handler,
		},
		{
			MethodName: "AddStorePhoto",
			Handler:    _StoreService_AddStorePhoto_Handler,
		},
		{
			MethodName: "DeleteStorePhoto",
			Handler:    _StoreService_DeleteStorePhoto_Handler,
		},
		{
			MethodName: "ListStorePhotos",
			Handler:    _StoreService_ListStorePhotos_Handler,
		},
		{
			MethodName: "GetStoreStats",
			Handler:    _StoreService_GetStoreStats_Handler,
		},
		{
			MethodName: "GetVisitStats",
			Handler:    _StoreService_GetVisitStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/store/v1/store.proto",
}
