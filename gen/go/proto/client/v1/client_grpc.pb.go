// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/client/v1/client.proto

package clientv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClientService_CreateClient_FullMethodName          = "/client.v1.ClientService/CreateClient"
	ClientService_GetClient_FullMethodName             = "/client.v1.ClientService/GetClient"
	ClientService_UpdateClient_FullMethodName          = "/client.v1.ClientService/UpdateClient"
	ClientService_DeleteClient_FullMethodName          = "/client.v1.ClientService/DeleteClient"
	ClientService_ListClients_FullMethodName           = "/client.v1.ClientService/ListClients"
	ClientService_AddContactPerson_FullMethodName      = "/client.v1.ClientService/AddContactPerson"
	ClientService_UpdateContactPerson_FullMethodName   = "/client.v1.ClientService/UpdateContactPerson"
	ClientService_DeleteContactPerson_FullMethodName   = "/client.v1.ClientService/DeleteContactPerson"
	ClientService_ListContactPersons_FullMethodName    = "/client.v1.ClientService/ListContactPersons"
	ClientService_CreateContract_FullMethodName        = "/client.v1.ClientService/CreateContract"
	ClientService_UpdateContract_FullMethodName        = "/client.v1.ClientService/UpdateContract"
	ClientService_GetContract_FullMethodName           = "/client.v1.ClientService/GetContract"
	ClientService_ListContracts_FullMethodName         = "/client.v1.ClientService/ListContracts"
	ClientService_AddContractAttachment_FullMethodName = "/client.v1.ClientService/AddContractAttachment"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	// Client management
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*ClientResponse, error)
	DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error)
	// Contact person management
	AddContactPerson(ctx context.Context, in *AddContactPersonRequest, opts ...grpc.CallOption) (*ContactPersonResponse, error)
	UpdateContactPerson(ctx context.Context, in *UpdateContactPersonRequest, opts ...grpc.CallOption) (*ContactPersonResponse, error)
	DeleteContactPerson(ctx context.Context, in *DeleteContactPersonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListContactPersons(ctx context.Context, in *ListContactPersonsRequest, opts ...grpc.CallOption) (*ListContactPersonsResponse, error)
	// Contract management
	CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*ContractResponse, error)
	UpdateContract(ctx context.Context, in *UpdateContractRequest, opts ...grpc.CallOption) (*ContractResponse, error)
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*ContractResponse, error)
	ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error)
	AddContractAttachment(ctx context.Context, in *AddContractAttachmentRequest, opts ...grpc.CallOption) (*ContractAttachmentResponse, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, ClientService_CreateClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetClient(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, ClientService_GetClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*ClientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, ClientService_UpdateClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_DeleteClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ListClients(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*ListClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClientsResponse)
	err := c.cc.Invoke(ctx, ClientService_ListClients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) AddContactPerson(ctx context.Context, in *AddContactPersonRequest, opts ...grpc.CallOption) (*ContactPersonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactPersonResponse)
	err := c.cc.Invoke(ctx, ClientService_AddContactPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) UpdateContactPerson(ctx context.Context, in *UpdateContactPersonRequest, opts ...grpc.CallOption) (*ContactPersonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactPersonResponse)
	err := c.cc.Invoke(ctx, ClientService_UpdateContactPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) DeleteContactPerson(ctx context.Context, in *DeleteContactPersonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_DeleteContactPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ListContactPersons(ctx context.Context, in *ListContactPersonsRequest, opts ...grpc.CallOption) (*ListContactPersonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactPersonsResponse)
	err := c.cc.Invoke(ctx, ClientService_ListContactPersons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*ContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, ClientService_CreateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) UpdateContract(ctx context.Context, in *UpdateContractRequest, opts ...grpc.CallOption) (*ContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, ClientService_UpdateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*ContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractResponse)
	err := c.cc.Invoke(ctx, ClientService_GetContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContractsResponse)
	err := c.cc.Invoke(ctx, ClientService_ListContracts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) AddContractAttachment(ctx context.Context, in *AddContractAttachmentRequest, opts ...grpc.CallOption) (*ContractAttachmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContractAttachmentResponse)
	err := c.cc.Invoke(ctx, ClientService_AddContractAttachment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility.
type ClientServiceServer interface {
	// Client management
	CreateClient(context.Context, *CreateClientRequest) (*ClientResponse, error)
	GetClient(context.Context, *GetClientRequest) (*ClientResponse, error)
	UpdateClient(context.Context, *UpdateClientRequest) (*ClientResponse, error)
	DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error)
	ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error)
	// Contact person management
	AddContactPerson(context.Context, *AddContactPersonRequest) (*ContactPersonResponse, error)
	UpdateContactPerson(context.Context, *UpdateContactPersonRequest) (*ContactPersonResponse, error)
	DeleteContactPerson(context.Context, *DeleteContactPersonRequest) (*emptypb.Empty, error)
	ListContactPersons(context.Context, *ListContactPersonsRequest) (*ListContactPersonsResponse, error)
	// Contract management
	CreateContract(context.Context, *CreateContractRequest) (*ContractResponse, error)
	UpdateContract(context.Context, *UpdateContractRequest) (*ContractResponse, error)
	GetContract(context.Context, *GetContractRequest) (*ContractResponse, error)
	ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error)
	AddContractAttachment(context.Context, *AddContractAttachmentRequest) (*ContractAttachmentResponse, error)
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientServiceServer struct{}

func (UnimplementedClientServiceServer) CreateClient(context.Context, *CreateClientRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedClientServiceServer) GetClient(context.Context, *GetClientRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClient not implemented")
}
func (UnimplementedClientServiceServer) UpdateClient(context.Context, *UpdateClientRequest) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedClientServiceServer) DeleteClient(context.Context, *DeleteClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedClientServiceServer) ListClients(context.Context, *ListClientsRequest) (*ListClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClients not implemented")
}
func (UnimplementedClientServiceServer) AddContactPerson(context.Context, *AddContactPersonRequest) (*ContactPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContactPerson not implemented")
}
func (UnimplementedClientServiceServer) UpdateContactPerson(context.Context, *UpdateContactPersonRequest) (*ContactPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactPerson not implemented")
}
func (UnimplementedClientServiceServer) DeleteContactPerson(context.Context, *DeleteContactPersonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContactPerson not implemented")
}
func (UnimplementedClientServiceServer) ListContactPersons(context.Context, *ListContactPersonsRequest) (*ListContactPersonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactPersons not implemented")
}
func (UnimplementedClientServiceServer) CreateContract(context.Context, *CreateContractRequest) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContract not implemented")
}
func (UnimplementedClientServiceServer) UpdateContract(context.Context, *UpdateContractRequest) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContract not implemented")
}
func (UnimplementedClientServiceServer) GetContract(context.Context, *GetContractRequest) (*ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedClientServiceServer) ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContracts not implemented")
}
func (UnimplementedClientServiceServer) AddContractAttachment(context.Context, *AddContractAttachmentRequest) (*ContractAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContractAttachment not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}
func (UnimplementedClientServiceServer) testEmbeddedByValue()                       {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetClient(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_DeleteClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).DeleteClient(ctx, req.(*DeleteClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ListClients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ListClients(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_AddContactPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContactPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).AddContactPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_AddContactPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).AddContactPerson(ctx, req.(*AddContactPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_UpdateContactPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).UpdateContactPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_UpdateContactPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).UpdateContactPerson(ctx, req.(*UpdateContactPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_DeleteContactPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).DeleteContactPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_DeleteContactPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).DeleteContactPerson(ctx, req.(*DeleteContactPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ListContactPersons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactPersonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ListContactPersons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ListContactPersons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ListContactPersons(ctx, req.(*ListContactPersonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_CreateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).CreateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_CreateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).CreateContract(ctx, req.(*CreateContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_UpdateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).UpdateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_UpdateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).UpdateContract(ctx, req.(*UpdateContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetContract(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ListContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ListContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ListContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ListContracts(ctx, req.(*ListContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_AddContractAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContractAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).AddContractAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_AddContractAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).AddContractAttachment(ctx, req.(*AddContractAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.v1.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _ClientService_CreateClient_Handler,
		},
		{
			MethodName: "GetClient",
			Handler:    _ClientService_GetClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _ClientService_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _ClientService_DeleteClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _ClientService_ListClients_Handler,
		},
		{
			MethodName: "AddContactPerson",
			Handler:    _ClientService_AddContactPerson_Handler,
		},
		{
			MethodName: "UpdateContactPerson",
			Handler:    _ClientService_UpdateContactPerson_Handler,
		},
		{
			MethodName: "DeleteContactPerson",
			Handler:    _ClientService_DeleteContactPerson_Handler,
		},
		{
			MethodName: "ListContactPersons",
			Handler:    _ClientService_ListContactPersons_Handler,
		},
		{
			MethodName: "CreateContract",
			Handler:    _ClientService_CreateContract_Handler,
		},
		{
			MethodName: "UpdateContract",
			Handler:    _ClientService_UpdateContract_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _ClientService_GetContract_Handler,
		},
		{
			MethodName: "ListContracts",
			Handler:    _ClientService_ListContracts_Handler,
		},
		{
			MethodName: "AddContractAttachment",
			Handler:    _ClientService_AddContractAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/client/v1/client.proto",
}
