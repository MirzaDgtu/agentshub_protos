// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/media/v1/media.proto

package mediav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaService_UploadFile_FullMethodName        = "/media.v1.MediaService/UploadFile"
	MediaService_GetFile_FullMethodName           = "/media.v1.MediaService/GetFile"
	MediaService_DeleteFile_FullMethodName        = "/media.v1.MediaService/DeleteFile"
	MediaService_GetFileInfo_FullMethodName       = "/media.v1.MediaService/GetFileInfo"
	MediaService_ResizeImage_FullMethodName       = "/media.v1.MediaService/ResizeImage"
	MediaService_OptimizeImage_FullMethodName     = "/media.v1.MediaService/OptimizeImage"
	MediaService_GetImageThumbnail_FullMethodName = "/media.v1.MediaService/GetImageThumbnail"
	MediaService_BatchUploadFiles_FullMethodName  = "/media.v1.MediaService/BatchUploadFiles"
	MediaService_BatchDeleteFiles_FullMethodName  = "/media.v1.MediaService/BatchDeleteFiles"
)

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MediaService предоставляет методы для работы с медиафайлами
type MediaServiceClient interface {
	// File operations
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error)
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	GetFileInfo(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// Image operations
	ResizeImage(ctx context.Context, in *ResizeImageRequest, opts ...grpc.CallOption) (*ResizeImageResponse, error)
	OptimizeImage(ctx context.Context, in *OptimizeImageRequest, opts ...grpc.CallOption) (*OptimizeImageResponse, error)
	GetImageThumbnail(ctx context.Context, in *GetThumbnailRequest, opts ...grpc.CallOption) (*GetThumbnailResponse, error)
	// Batch operations
	BatchUploadFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BatchUploadRequest, BatchUploadResponse], error)
	BatchDeleteFiles(ctx context.Context, in *BatchDeleteRequest, opts ...grpc.CallOption) (*BatchDeleteResponse, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediaService_ServiceDesc.Streams[0], MediaService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_UploadFileClient = grpc.ClientStreamingClient[UploadFileRequest, UploadFileResponse]

func (c *mediaServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediaService_ServiceDesc.Streams[1], MediaService_GetFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_GetFileClient = grpc.ServerStreamingClient[FileChunk]

func (c *mediaServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, MediaService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetFileInfo(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, MediaService_GetFileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ResizeImage(ctx context.Context, in *ResizeImageRequest, opts ...grpc.CallOption) (*ResizeImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResizeImageResponse)
	err := c.cc.Invoke(ctx, MediaService_ResizeImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) OptimizeImage(ctx context.Context, in *OptimizeImageRequest, opts ...grpc.CallOption) (*OptimizeImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizeImageResponse)
	err := c.cc.Invoke(ctx, MediaService_OptimizeImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetImageThumbnail(ctx context.Context, in *GetThumbnailRequest, opts ...grpc.CallOption) (*GetThumbnailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThumbnailResponse)
	err := c.cc.Invoke(ctx, MediaService_GetImageThumbnail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) BatchUploadFiles(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BatchUploadRequest, BatchUploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MediaService_ServiceDesc.Streams[2], MediaService_BatchUploadFiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BatchUploadRequest, BatchUploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_BatchUploadFilesClient = grpc.ClientStreamingClient[BatchUploadRequest, BatchUploadResponse]

func (c *mediaServiceClient) BatchDeleteFiles(ctx context.Context, in *BatchDeleteRequest, opts ...grpc.CallOption) (*BatchDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeleteResponse)
	err := c.cc.Invoke(ctx, MediaService_BatchDeleteFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility.
//
// MediaService предоставляет методы для работы с медиафайлами
type MediaServiceServer interface {
	// File operations
	UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error
	GetFile(*GetFileRequest, grpc.ServerStreamingServer[FileChunk]) error
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	GetFileInfo(context.Context, *GetFileRequest) (*FileInfo, error)
	// Image operations
	ResizeImage(context.Context, *ResizeImageRequest) (*ResizeImageResponse, error)
	OptimizeImage(context.Context, *OptimizeImageRequest) (*OptimizeImageResponse, error)
	GetImageThumbnail(context.Context, *GetThumbnailRequest) (*GetThumbnailResponse, error)
	// Batch operations
	BatchUploadFiles(grpc.ClientStreamingServer[BatchUploadRequest, BatchUploadResponse]) error
	BatchDeleteFiles(context.Context, *BatchDeleteRequest) (*BatchDeleteResponse, error)
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaServiceServer struct{}

func (UnimplementedMediaServiceServer) UploadFile(grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMediaServiceServer) GetFile(*GetFileRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedMediaServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedMediaServiceServer) GetFileInfo(context.Context, *GetFileRequest) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedMediaServiceServer) ResizeImage(context.Context, *ResizeImageRequest) (*ResizeImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeImage not implemented")
}
func (UnimplementedMediaServiceServer) OptimizeImage(context.Context, *OptimizeImageRequest) (*OptimizeImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimizeImage not implemented")
}
func (UnimplementedMediaServiceServer) GetImageThumbnail(context.Context, *GetThumbnailRequest) (*GetThumbnailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImageThumbnail not implemented")
}
func (UnimplementedMediaServiceServer) BatchUploadFiles(grpc.ClientStreamingServer[BatchUploadRequest, BatchUploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BatchUploadFiles not implemented")
}
func (UnimplementedMediaServiceServer) BatchDeleteFiles(context.Context, *BatchDeleteRequest) (*BatchDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeleteFiles not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}
func (UnimplementedMediaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaServiceServer).UploadFile(&grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_UploadFileServer = grpc.ClientStreamingServer[UploadFileRequest, UploadFileResponse]

func _MediaService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaServiceServer).GetFile(m, &grpc.GenericServerStream[GetFileRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_GetFileServer = grpc.ServerStreamingServer[FileChunk]

func _MediaService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetFileInfo(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ResizeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ResizeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_ResizeImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ResizeImage(ctx, req.(*ResizeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_OptimizeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).OptimizeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_OptimizeImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).OptimizeImage(ctx, req.(*OptimizeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetImageThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetImageThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetImageThumbnail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetImageThumbnail(ctx, req.(*GetThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_BatchUploadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaServiceServer).BatchUploadFiles(&grpc.GenericServerStream[BatchUploadRequest, BatchUploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MediaService_BatchUploadFilesServer = grpc.ClientStreamingServer[BatchUploadRequest, BatchUploadResponse]

func _MediaService_BatchDeleteFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).BatchDeleteFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_BatchDeleteFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).BatchDeleteFiles(ctx, req.(*BatchDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.v1.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFile",
			Handler:    _MediaService_DeleteFile_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _MediaService_GetFileInfo_Handler,
		},
		{
			MethodName: "ResizeImage",
			Handler:    _MediaService_ResizeImage_Handler,
		},
		{
			MethodName: "OptimizeImage",
			Handler:    _MediaService_OptimizeImage_Handler,
		},
		{
			MethodName: "GetImageThumbnail",
			Handler:    _MediaService_GetImageThumbnail_Handler,
		},
		{
			MethodName: "BatchDeleteFiles",
			Handler:    _MediaService_BatchDeleteFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _MediaService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _MediaService_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BatchUploadFiles",
			Handler:       _MediaService_BatchUploadFiles_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/media/v1/media.proto",
}
