syntax = "proto3";

package media.v1;

option go_package = "github.com/MirzaDgtu/agentshub_proto/gen/go/media/v1;mediav1";

import "google/protobuf/timestamp.proto";

// MediaService предоставляет методы для работы с медиафайлами
service MediaService {
    // File operations
    rpc UploadFile(stream UploadFileRequest) returns (UploadFileResponse) {}
    rpc GetFile(GetFileRequest) returns (stream FileChunk) {}
    rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse) {}
    rpc GetFileInfo(GetFileRequest) returns (FileInfo) {}

    // Image operations
    rpc ResizeImage(ResizeImageRequest) returns (ResizeImageResponse) {}
    rpc OptimizeImage(OptimizeImageRequest) returns (OptimizeImageResponse) {}
    rpc GetImageThumbnail(GetThumbnailRequest) returns (GetThumbnailResponse) {}

    // Batch operations
    rpc BatchUploadFiles(stream BatchUploadRequest) returns (BatchUploadResponse) {}
    rpc BatchDeleteFiles(BatchDeleteRequest) returns (BatchDeleteResponse) {}
}

message UploadFileRequest {
    oneof data {
        FileMetadata metadata = 1;
        bytes chunk_data = 2;
    }
}

message FileMetadata {
    string filename = 1;
    string content_type = 2;
    string bucket = 3;  // profiles, stores, contracts
    map<string, string> metadata = 4;
}

message FileInfo {
    string file_id = 1;
    string filename = 2;
    string content_type = 3;
    int64 size = 4;
    string bucket = 5;
    string url = 6;
    map<string, string> metadata = 7;
    google.protobuf.Timestamp created_at = 8;
}

message FileChunk {
    bytes data = 1;
}

message UploadFileResponse {
    string file_id = 1;
    string url = 2;
    FileInfo info = 3;
}

message GetFileRequest {
    string file_id = 1;
}

message DeleteFileRequest {
    string file_id = 1;
}

message DeleteFileResponse {
    bool success = 1;
}

message ResizeImageRequest {
    string file_id = 1;
    int32 width = 2;
    int32 height = 3;
    bool maintain_aspect_ratio = 4;
}

message ResizeImageResponse {
    string file_id = 1;
    string url = 2;
    FileInfo info = 3;
}

message OptimizeImageRequest {
    string file_id = 1;
    string format = 2;  // jpeg, webp, etc.
    int32 quality = 3;  // 1-100
}

message OptimizeImageResponse {
    string file_id = 1;
    string url = 2;
    int64 original_size = 3;
    int64 optimized_size = 4;
    FileInfo info = 5;
}

message GetThumbnailRequest {
    string file_id = 1;
    int32 size = 2;  // Размер квадратного thumbnail
}

message GetThumbnailResponse {
    string url = 1;
    FileInfo info = 2;
}

message BatchUploadRequest {
    oneof data {
        BatchMetadata metadata = 1;
        BatchChunk chunk = 2;
    }
}

message BatchMetadata {
    repeated FileMetadata files = 1;
}

message BatchChunk {
    int32 file_index = 1;
    bytes chunk_data = 2;
}

message BatchUploadResponse {
    repeated UploadFileResponse files = 1;
    int32 total_processed = 2;
    int32 successful = 3;
    int32 failed = 4;
}

message BatchDeleteRequest {
    repeated string file_ids = 1;
}

message BatchDeleteResponse {
    map<string, bool> results = 1;  // file_id -> success
    int32 total_processed = 2;
    int32 successful = 3;
    int32 failed = 4;
}